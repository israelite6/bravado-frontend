{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["OpenApp","search","useParams","useState","state","setState","getPlatform","useCallback","event","test","navigator","userAgent","window","location","useEffect","setTimeout","document","getElementById","click","onClick","id","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"+PAcA,SAASA,EAAT,GAA+B,oBAAC,IACtBC,EAAWC,cAAXD,OADqB,EAEHE,mBAAS,IAFN,mBAEtBC,EAFsB,KAEfC,EAFe,KAIvBC,EAAcC,uBAAY,SAACC,GAE7B,iEAAiEC,KAC/DC,UAAUC,YAIZN,EAAS,2BACTO,OAAOC,SAAP,2BAAsCZ,IAGtCI,EAAS,uBAEV,IASH,OAPAS,qBAAU,WACRR,IACAS,YAAW,WACTC,SAASC,eAAe,UAAUC,UACjC,OAEF,IAED,gCACE,wBACEC,QAAS,WACPP,OAAOC,SAAP,2BAAsCZ,IAExCmB,GAAG,SAJL,oBADF,WASWhB,EATX,IASkB,uBATlB,gBAUe,4BAAIH,OAKRoB,MApDf,WACE,OACE,8BACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,oBAAoBC,UAAWvB,EAASwB,OAAK,SCIlDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BQ,M","file":"static/js/main.90950586.chunk.js","sourcesContent":["import \"./App.css\";\nimport { BrowserRouter, Route, useParams } from \"react-router-dom\";\nimport { useCallback, useEffect, useState } from \"react\";\n\nfunction App() {\n  return (\n    <div>\n      <BrowserRouter>\n        <Route path='/:search/:search?' component={OpenApp} exact />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nfunction OpenApp({ ...props }) {\n  const { search } = useParams();\n  const [state, setState] = useState(\"\");\n\n  const getPlatform = useCallback((event) => {\n    if (\n      /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n        navigator.userAgent\n      )\n    ) {\n      // true for mobile device\n      setState(\"this is a mobile device\");\n      window.location = `bravado://search/${search}`;\n    } else {\n      // false for not mobile device\n      setState(\"not mobile device\");\n    }\n  }, []);\n\n  useEffect(() => {\n    getPlatform();\n    setTimeout(() => {\n      document.getElementById(\"button\").click();\n    }, 1000);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return (\n    <div>\n      <button\n        onClick={() => {\n          window.location = `bravado://search/${search}`;\n        }}\n        id='button'\n      >\n        button\n      </button>\n      status: {state} <br />\n      My search is <b>{search}</b>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}